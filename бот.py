import telebot
from telebot import types
from collections import defaultdict
import datetime

# ---------------- CONFIG ----------------
TOKEN = "8400828602:AAGmF8japcI3YkWRmvd2o9QXoohcYc4I7vQ"
bot = telebot.TeleBot(TOKEN)

# –ê–¥–º–∏–Ω (—é–∑–µ—Ä–Ω–µ–π–º). –ë–æ—Ç –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –Ω–∏–∫.
ADMIN_CHAT = 5539798707

# ---------------- STATE -----------------
user_spending = defaultdict(int)      # {user_id: —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ (–≤ —Ç.—á. —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)}
referrals = defaultdict(list)         # {referrer_id: [user_id —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤]}
user_referrer = {}                    # {user_id: referrer_id}
reviews = []                          # —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤–∏–¥–∞ "@user: —Ç–µ–∫—Å—Ç"

user_language = {}                    # {user_id: "ru" –∏–ª–∏ "ua"}
user_carts = defaultdict(list)        # {user_id: [(product_name, price), ...]}
user_states = {}                      # {user_id: "writing_review" –∏–ª–∏ None}

# –ó–∞–∫–∞–∑—ã: order_id -> {...}
orders = {}
_next_order_id = 1

# --------------- TEXTS -----------------
texts = {
    # —è–∑—ã–∫–æ–≤–æ–π –≤—ã–±–æ—Ä
    "choose_lang": "üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —è–∑—ã–∫ / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω—É –º–æ–≤—É:",
    "lang_ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "lang_ua": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    "welcome_ru": "üí® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *VapeAlva*!\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
    "welcome_ua": "üí® –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ *VapeAlva*!\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä–æ–∑–¥—ñ–ª:",

    "menu_catalog_ru": "üìÇ –ö–∞—Ç–∞–ª–æ–≥",
    "menu_catalog_ua": "üìÇ –ö–∞—Ç–∞–ª–æ–≥",
    "menu_order_ru": "üõí –ó–∞–∫–∞–∑–∞—Ç—å",
    "menu_order_ua": "üõí –ó–∞–º–æ–≤–∏—Ç–∏",
    "menu_cart_ru": "üõç –ö–æ—Ä–∑–∏–Ω–∞",
    "menu_cart_ua": "üõç –ö–æ—à–∏–∫",
    "menu_about_ru": "‚ÑπÔ∏è –û –Ω–∞—Å",
    "menu_about_ua": "‚ÑπÔ∏è –ü—Ä–æ –Ω–∞—Å",
    "menu_partner_ru": "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "menu_partner_ua": "ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∞",
    "menu_orders_ru": "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã",
    "menu_orders_ua": "üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
    "menu_reviews_ru": "‚úç –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤",
    "menu_reviews_ua": "‚úç –ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫",
    "back_btn_ru": "‚¨Ö –ù–∞–∑–∞–¥",
    "back_btn_ua": "‚¨Ö –ù–∞–∑–∞–¥",

    "please_choose_ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.",
    "please_choose_ua": "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –º–µ–Ω—é.",

    # –æ—Ç–∑—ã–≤—ã
    "reviews_list_empty_ru": "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!",
    "reviews_list_empty_ua": "–ü–æ–∫–∏ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º–∏!",
    "thank_review_ru": "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω.",
    "thank_review_ua": "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à –≤—ñ–¥–≥—É–∫ –¥–æ–¥–∞–Ω–æ.",

    # –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∞ / –æ –Ω–∞—Å
    "partner_program_ru": (
        "üíº *–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ VapeAlva*\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ü–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã!\n\n"
        "üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{count}*\n"
        "üéÅ –ö–æ–≥–¥–∞ –≤–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ —Å—É–º–º–∞—Ä–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç –ø–æ–∫—É–ø–∫–∏ –Ω–∞ *4100 –≥—Ä–Ω*, "
        "–≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –≤—ã–±–æ—Ä:\n"
        "‚Ä¢ üí® –õ—é–±–∞—è –∂–∏–¥–∫–æ—Å—Ç—å –∏–∑ –Ω–∞—à–µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞\n"
        "‚Ä¢ üîÑ –ò–ª–∏ –¥–≤–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ –ø–æ –≤–∞—à–µ–º—É –≤–∫—É—Å—É\n\n"
        "üìå –í—Å—ë –ø—Ä–æ—Å—Ç–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º, –æ–Ω–∏ –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç ‚Äî –≤—ã –∫–æ–ø–∏—Ç–µ –±–æ–Ω—É—Å—ã.\n\n"
        "üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link}\n"
        "üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: {spent} –≥—Ä–Ω"
    ),
    "partner_program_ua": (
        "üíº *–ü–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ VapeAlva*\n\n"
        "–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ –∑–∞ –≤–∞—à–∏–º —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —ñ –æ—Ç—Ä–∏–º—É–π—Ç–µ —Ü—ñ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏!\n\n"
        "üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: *{count}*\n"
        "üéÅ –ö–æ–ª–∏ –≤–∞—à—ñ –∑–∞–ø—Ä–æ—à–µ–Ω—ñ –∑—Ä–æ–±–ª—è—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å—É–º—É *4100 –≥—Ä–Ω*, "
        "–≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –Ω–∞ –≤–∏–±—ñ—Ä:\n"
        "‚Ä¢ üí® –ë—É–¥—å-—è–∫–∞ —Ä—ñ–¥–∏–Ω–∞ –∑ –Ω–∞—à–æ–≥–æ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É\n"
        "‚Ä¢ üîÑ –ê–±–æ –¥–≤–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂—ñ –Ω–∞ –≤–∞—à —Å–º–∞–∫\n\n"
        "üìå –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥—Ä—É–∑—è–º, –≤–æ–Ω–∏ –∑–∞–º–æ–≤–ª—è—é—Ç—å ‚Äî –≤–∏ –Ω–∞–∫–æ–ø–∏—á—É—î—Ç–µ –±–æ–Ω—É—Å–∏.\n\n"
        "üîó –í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {link}\n"
        "üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ –ø–æ –≤–∞—à–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—é: {spent} –≥—Ä–Ω"
    ),

    "about_ru": "üí® *VapeAlva* ‚Äî –º–∞–≥–∞–∑–∏–Ω –≤–µ–π–ø-—Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏.\nüöÄ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –£–∫—Ä–∞–∏–Ω–µ.\n\nüìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @helperAlva",
    "about_ua": "üí® *VapeAlva* ‚Äî –º–∞–≥–∞–∑–∏–Ω –≤–µ–π–ø-—Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–º–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞–º–∏.\nüöÄ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ.\n\nüìû –ü—ñ–¥—Ç—Ä–∏–º–∫–∞: @helperAlva",

    # –∫–æ—Ä–∑–∏–Ω–∞ / –∑–∞–∫–∞–∑
    "cart_empty_ru": "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.",
    "cart_empty_ua": "üõç –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.",
    "cart_title_ru": "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n",
    "cart_title_ua": "üõç –í–∞—à –∫–æ—à–∏–∫:\n\n",
    "cart_total_ru": "\n*–û–±—â–∞—è —Å—É–º–º–∞:* {total} ‚Ç¥",
    "cart_total_ua": "\n*–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:* {total} ‚Ç¥",

    "order_button_ru": "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
    "order_button_ua": "–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",

    "pay_method_ru": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
    "pay_method_ua": "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
    "pay_on_delivery_ru": "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏",
    "pay_on_delivery_ua": "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ",
    "pay_prepay_ru": "–û–ø–ª–∞—Ç–∞ –ö–∞—Ä—Ç–æ–π",
    "pay_prepay_ua": "–û–ø–ª–∞—Ç–∞ –ö–∞—Ä—Ç–∫–æ—é",
    "pay_crypto_ru": "–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π",
    "pay_crypto_ua": "–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é",

    "pay_on_delivery_info_ru": "üìû –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.",
    "pay_on_delivery_info_ua": "üìû –ó –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –∑–≤'—è–∂–µ—Ç—å—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.",

    "prepay_info_ru": (
        "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:\n\n"
        "–§–ò–û –∫–∞—Ä—Ç—ã: –í–ª–∞–¥–∏—Å–ª–∞–≤. –ì.\n"
        "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 4441 1110 3909 5041\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É."
    ),
    "prepay_info_ua": (
        "üí≥ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:\n\n"
        "–ü–Ü–ë –∫–∞—Ä—Ç–∏: –í–ª–∞–¥–∏—Å–ª–∞–≤. –ì.\n"
        "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏: 4441 1110 3909 5041\n\n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É."
    ),

    "crypto_wallet": "UQDjclQadIIq-DUoTNY53oHfcp9WVi5mRVnUVxVUnQ-vznEc (TON)",

    "pay_done_ru": "–û–ø–ª–∞—á–µ–Ω–æ",
    "pay_done_ua": "–û–ø–ª–∞—á–µ–Ω–æ",

    "clear_cart_ru": "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
    "clear_cart_ua": "–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫",

    # —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    "referral_purchase_ru": "üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {user} —Å–¥–µ–ª–∞–ª –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å—É–º–º—É {amount} –≥—Ä–Ω.\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ: {total} –≥—Ä–Ω.",
    "referral_purchase_ua": "üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {user} –∑—Ä–æ–±–∏–≤ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å—É–º—É {amount} –≥—Ä–Ω.\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–æ–∫—É–ø–æ–∫ –ø–æ –≤–∞—à–æ–º—É –ø–æ—Å–∏–ª–∞–Ω–Ω—é: {total} –≥—Ä–Ω.",

    "please_choose": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é."
}

def t(key, lang="ru"):
    key_full = f"{key}_{lang}"
    return texts.get(key_full) or texts.get(key) or key

# --------------- PRODUCTS -----------------
# –•—Ä–∞–Ω–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –ø—Ä–æ—Å—Ç–æ–º —Ä–µ–µ—Å—Ç—Ä–µ: id -> (category, name, price)
PRODUCTS = {}
PRODUCTS_BY_CATEGORY = defaultdict(list)
_product_id_seq = 1

def add_product(category, name, price):
    global _product_id_seq
    pid = _product_id_seq
    PRODUCTS[pid] = {"category": category, "name": name, "price": int(price)}
    PRODUCTS_BY_CATEGORY[category].append(pid)
    _product_id_seq += 1
    return pid

# –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ Vaporesso ‚Äî —Ü–µ–Ω–∞ 135, –ø–æ—Ä—è–¥–æ–∫ –ø–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é/–º–ª (–∫—Ä–∞—Å–∏–≤–æ)
cartridge_common_price = 135
add_product("cartridges_vaporesso", "Vaporesso Xros Series 1.0, 3 ml", cartridge_common_price)
add_product("cartridges_vaporesso", "Vaporesso Xros Series 1.0, 2 ml", cartridge_common_price)
add_product("cartridges_vaporesso", "Vaporesso Xros Series 0.8, 3 ml", cartridge_common_price)
add_product("cartridges_vaporesso", "Vaporesso Xros Series 0.8, 2 ml", cartridge_common_price)
add_product("cartridges_vaporesso", "Vaporesso Xros Series 0.6, 3 ml", cartridge_common_price)
add_product("cartridges_vaporesso", "Vaporesso Xros Series 0.6, 2 ml", cartridge_common_price)
add_product("cartridges_vaporesso", "Vaporesso Xros Series 0.4, 3 ml", cartridge_common_price)
add_product("cartridges_vaporesso", "Vaporesso Xros Series 0.4, 2 ml", cartridge_common_price)

# Voopoo cartridges (145)
voopoo_price = 145
add_product("cartridges_voopoo", "Voopoo Argus 3ml 0.7", voopoo_price)
add_product("cartridges_voopoo", "Voopoo Argus 3ml 1.0", voopoo_price)
add_product("cartridges_voopoo", "Voopoo Argus 3ml 0.4", voopoo_price)
add_product("cartridges_voopoo", "Voopoo Vmate 3ml 0.7", voopoo_price)
add_product("cartridges_voopoo", "Voopoo Vmate 2ml 0.7 (–¥–ª—è –≤–µ—Ä—Å–∏–∏ TPD)", voopoo_price)
add_product("cartridges_voopoo", "Voopoo Vmate 3ml 0.4", voopoo_price)
add_product("cartridges_voopoo", "Voopoo Vmate 2ml 0.4 (–¥–ª—è –≤–µ—Ä—Å–∏–∏ TPD)", voopoo_price)

# Elf Bar ELFX cartridges (135)
add_product("cartridges_elfx", "Elfx 2ml 0.6", 135)
add_product("cartridges_elfx", "Elfx 2ml 0.8", 135)

# –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã (pods)
add_product("pods", "Vaporesso xros 5", 1129)
add_product("pods", "Voopoo Argus G2", 1049)
add_product("pods", "Vaporesso xros 5 mini", 850)
add_product("pods", "Elbar Bar ELFX Pro", 849)
add_product("pods", "Vaporesso xros 4 mini", 809)
add_product("pods", "Voopoo Vmate I2 (–≤—Ç–æ—Ä–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ)", 719)
add_product("pods", "Elf Bar EV15000", 299)

# liquids placeholder
add_product("liquids", "(–°–∫–æ—Ä–æ) –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∂–∏–¥–∫–æ—Å—Ç–µ–π ‚Äî –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 0)

# –ú–µ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (ru, ua)
CATEGORY_LABELS = {
    "pods": ("üí® –ü–æ–¥-—Å–∏—Å—Ç–µ–º—ã", "üí® –ü–æ–¥-—Å–∏—Å—Ç–µ–º–∏"),
    "liquids": ("üßÉ –ñ–∏–¥–∫–æ—Å—Ç–∏", "üßÉ –†—ñ–¥–∏–Ω–∏"),
    "cartridges": ("üîÑ –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏", "üîÑ –ö–∞—Ä—Ç—Ä–∏–¥–∂—ñ"),
    "cartridges_vaporesso": ("üîÑ –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ ‚Äî Vaporesso", "üîÑ –ö–∞—Ä—Ç—Ä–∏–¥–∂—ñ ‚Äî Vaporesso"),
    "cartridges_voopoo": ("üîÑ –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ ‚Äî Voopoo", "üîÑ –ö–∞—Ä—Ç—Ä–∏–¥–∂—ñ ‚Äî Voopoo"),
    "cartridges_elfx": ("üîÑ –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ ‚Äî Elf Bar ELFX", "üîÑ –ö–∞—Ä—Ç—Ä–∏–¥–∂—ñ ‚Äî Elf Bar ELFX"),
}

def cat_label(cat, lang="ru"):
    lbls = CATEGORY_LABELS.get(cat, (cat, cat))
    return lbls[0] if lang == "ru" else lbls[1]

# ---------------- HELPERS -----------------
def format_currency(n):
    # n –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º ‚Äî –∑–∞—â–∏—Ç–∏–º—Å—è
    try:
        return f"{int(n)} ‚Ç¥"
    except Exception:
        return f"{n} ‚Ç¥"

def create_order(user_id, items, total, method, status):
    global _next_order_id
    oid = _next_order_id
    _next_order_id += 1
    orders[oid] = {
        "id": oid,
        "user_id": user_id,
        "items": items.copy(),
        "total": total,
        "method": method,
        "status": status,
        "created": datetime.datetime.utcnow().isoformat()
    }
    return oid

def find_user_pending_order(user_id, statuses=("pending", "cod")):
    user_orders = [o for o in orders.values() if o["user_id"] == user_id and o["status"] in statuses]
    if not user_orders:
        return None
    return max(user_orders, key=lambda x: x["id"])

def notify_admin(text, reply_markup=None):
    try:
        bot.send_message(ADMIN_CHAT, text, parse_mode="Markdown", reply_markup=reply_markup)
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:", e)

# ---------- START / LANGUAGE HANDLERS ----------
@bot.message_handler(commands=["start"])
def start_handler(message):
    user_id = message.from_user.id
    args = message.text.split()
    if len(args) > 1:
        try:
            referrer_id = int(args[1])
            if referrer_id != user_id and user_id not in referrals[referrer_id]:
                referrals[referrer_id].append(user_id)
                user_referrer[user_id] = referrer_id
                try:
                    bot.send_message(referrer_id,
                                     f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or message.from_user.first_name} "
                                     f"–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
                except Exception:
                    pass
        except Exception:
            pass

    if user_id not in user_language:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton(texts["lang_ru"]), types.KeyboardButton(texts["lang_ua"]))
        bot.send_message(user_id, texts["choose_lang"], reply_markup=markup)
    else:
        send_main_menu(message)

@bot.message_handler(func=lambda m: m.text in [texts["lang_ru"], texts["lang_ua"]])
def set_language(message):
    user_id = message.from_user.id
    if message.text == texts["lang_ru"]:
        user_language[user_id] = "ru"
    else:
        user_language[user_id] = "ua"
    send_main_menu(message)

# ------------- MAIN MENU -------------
def send_main_menu(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.add(
        types.KeyboardButton(t("menu_catalog", lang)),
        types.KeyboardButton(t("menu_order", lang)),
        types.KeyboardButton(t("menu_cart", lang)),
        types.KeyboardButton(t("menu_partner", lang)),
        types.KeyboardButton(t("menu_orders", lang)),
        types.KeyboardButton(t("menu_reviews", lang)),
    )
    bot.send_message(user_id, t("welcome", lang), parse_mode="Markdown", reply_markup=markup)

# ------------- CATALOG / MENU HANDLER -------------
@bot.message_handler(func=lambda m: True)
def menu_handler(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    text = message.text

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    if user_states.get(user_id) == "writing_review":
        # –ø–∞—Å—Å–∏–≤–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–∑—ã–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ö–µ–Ω–¥–ª–µ—Ä–µ –Ω–∏–∂–µ
        return

    if text == t("menu_catalog", lang) or text == t("menu_order", lang):
        show_catalog_main_menu(message)
        return

    if text == t("menu_cart", lang):
        show_cart(message)
        return

    if text == t("menu_about", lang):
        bot.send_message(user_id, texts["about_ru"] if lang == "ru" else texts["about_ua"], parse_mode="Markdown")
        return

    if text == t("menu_partner", lang):
        count = len(referrals.get(user_id, []))
        spent = user_spending.get(user_id, 0)
        try:
            bot_username = bot.get_me().username
        except Exception:
            bot_username = "your_bot_username"
        link = f"https://t.me/{bot_username}?start={user_id}"
        partner_text = texts["partner_program_ru"] if lang == "ru" else texts["partner_program_ua"]
        bot.send_message(user_id, partner_text.format(count=count, spent=spent, link=link), parse_mode="Markdown")
        return

    if text == t("menu_orders", lang):
        show_user_orders(message)
        return

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤:
    if text == t("menu_reviews", lang):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(
            types.KeyboardButton("‚úç " + ("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" if lang == "ru" else "–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫")),
            types.KeyboardButton("üëÅ " + ("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã" if lang == "ru" else "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–≥—É–∫–∏")),
            types.KeyboardButton(t("back_btn", lang))
        )
        bot.send_message(user_id, t("please_choose", lang), reply_markup=markup)
        return

    if text == "‚úç " + ("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" if lang == "ru" else "–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫"):
        bot.send_message(user_id, ("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ." if lang == "ru" else "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ."))
        user_states[user_id] = "writing_review"
        return

    if text == "üëÅ " + ("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã" if lang == "ru" else "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–≥—É–∫–∏"):
        show_reviews(message)
        return

    if text == t("back_btn", lang):
        send_main_menu(message)
        return

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞
@bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == "writing_review")
def handle_review_text(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    text_msg = message.text.strip()
    if text_msg:
        username = message.from_user.username or message.from_user.first_name
        reviews.append(f"@{username}: {text_msg}")
        bot.send_message(user_id, texts["thank_review_ru"] if lang == "ru" else texts["thank_review_ua"])
        user_states[user_id] = None
    else:
        bot.send_message(user_id, ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤." if lang == "ru" else "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–≥—É–∫."))

# ---------- –ö–ê–¢–ê–õ–û–ì ----------
def show_catalog_main_menu(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")

    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(cat_label("pods", lang), callback_data="cat_pods"),
        types.InlineKeyboardButton(cat_label("liquids", lang), callback_data="cat_liquids"),
        types.InlineKeyboardButton(cat_label("cartridges", lang), callback_data="cat_cartridges"),
        types.InlineKeyboardButton(t("back_btn", lang), callback_data="back_main"),
    )
    bot.send_message(user_id, t("menu_catalog", lang), reply_markup=markup)

def show_catalog_submenu_cartridges(call, lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(cat_label("cartridges_vaporesso", lang), callback_data="cat_cartridges_vaporesso"),
        types.InlineKeyboardButton(cat_label("cartridges_voopoo", lang), callback_data="cat_cartridges_voopoo"),
        types.InlineKeyboardButton(cat_label("cartridges_elfx", lang), callback_data="cat_cartridges_elfx"),
        types.InlineKeyboardButton(t("back_btn", lang), callback_data="cat_cartridges_back"),
    )
    try:
        bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                              text=t("menu_catalog", lang), reply_markup=markup)
    except Exception:
        # fallback if edit failed
        bot.send_message(call.from_user.id, t("menu_catalog", lang), reply_markup=markup)

def show_products_list(call_or_message, category, lang):
    # call_or_message –º–æ–∂–µ—Ç –±—ã—Ç—å CallbackQuery –∏–ª–∏ Message
    product_ids = PRODUCTS_BY_CATEGORY.get(category, [])
    if not product_ids:
        if isinstance(call_or_message, types.CallbackQuery):
            bot.answer_callback_query(call_or_message.id, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        else:
            bot.send_message(call_or_message.from_user.id, "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    text = f"üì¶ {cat_label(category, lang)}:\n\n"
    markup = types.InlineKeyboardMarkup(row_width=1)
    for pid in product_ids:
        prod = PRODUCTS[pid]
        text += f"{prod['name']} ‚Äî {format_currency(prod['price'])}\n"
        markup.add(types.InlineKeyboardButton(f"‚ûï {prod['name']}", callback_data=f"add_{pid}"))
    markup.add(types.InlineKeyboardButton(t("back_btn", lang), callback_data="back_catalog"))
    if isinstance(call_or_message, types.CallbackQuery):
        try:
            bot.edit_message_text(chat_id=call_or_message.from_user.id, message_id=call_or_message.message.message_id, text=text, reply_markup=markup)
        except Exception:
            bot.send_message(call_or_message.from_user.id, text, reply_markup=markup)
    else:
        bot.send_message(call_or_message.from_user.id, text, reply_markup=markup)

# ---------- CALLBACKS ----------
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    data = call.data

    try:
        if data == "back_main":
            send_main_menu(call.message)
            bot.answer_callback_query(call.id)
            return

        if data == "cat_pods":
            show_products_list(call, "pods", lang)
            bot.answer_callback_query(call.id)
            return

        if data == "cat_liquids":
            show_products_list(call, "liquids", lang)
            bot.answer_callback_query(call.id)
            return

        if data == "cat_cartridges":
            show_catalog_submenu_cartridges(call, lang)
            bot.answer_callback_query(call.id)
            return

        if data == "cat_cartridges_back":
            show_catalog_main_menu(call.message)
            bot.answer_callback_query(call.id)
            return

        if data == "cat_cartridges_vaporesso":
            show_products_list(call, "cartridges_vaporesso", lang)
            bot.answer_callback_query(call.id)
            return

        if data == "cat_cartridges_voopoo":
            show_products_list(call, "cartridges_voopoo", lang)
            bot.answer_callback_query(call.id)
            return

        if data == "cat_cartridges_elfx":
            show_products_list(call, "cartridges_elfx", lang)
            bot.answer_callback_query(call.id)
            return

        if data.startswith("add_"):
            pid_str = data[4:]
            if not pid_str.isdigit():
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞", show_alert=True)
                return
            pid = int(pid_str)
            if pid not in PRODUCTS:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            prod = PRODUCTS[pid]
            user_carts[user_id].append((prod["name"], prod["price"]))
            bot.answer_callback_query(call.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {prod['name']}")
            return

        if data == "back_catalog":
            show_catalog_main_menu(call.message)
            bot.answer_callback_query(call.id)
            return

        if data == "clear_cart":
            user_carts[user_id] = []
            bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞" if lang == "ru" else "–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
            try:
                bot.delete_message(call.from_user.id, call.message.message_id)
            except Exception:
                pass
            return

        if data == "order":
            cart = user_carts.get(user_id, [])
            if not cart:
                bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞" if lang == "ru" else "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π", show_alert=True)
                return
            total = sum(p for _, p in cart)
            order_id = create_order(user_id, cart, total, method="pending", status="pending")

            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton(t("pay_on_delivery", lang), callback_data=f"pay_cod_{order_id}"),
                types.InlineKeyboardButton(t("pay_prepay", lang), callback_data=f"pay_prepay_{order_id}"),
                types.InlineKeyboardButton(t("pay_crypto", lang), callback_data=f"pay_crypto_{order_id}"),
                types.InlineKeyboardButton(t("back_btn", lang), callback_data="back_main")
            )
            try:
                bot.edit_message_text(
                    chat_id=call.from_user.id,
                    message_id=call.message.message_id,
                    text=f"{t('pay_method', lang)}\n\n–°—É–º–º–∞: {format_currency(total)}",
                    reply_markup=markup
                )
            except Exception:
                bot.send_message(call.from_user.id, f"{t('pay_method', lang)}\n\n–°—É–º–º–∞: {format_currency(total)}", reply_markup=markup)
            bot.answer_callback_query(call.id)
            return

        # –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
        if data.startswith("pay_cod_"):
            parts = data.split('_')
            try:
                order_id = int(parts[-1])
            except ValueError:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
                return
            order = orders.get(order_id)
            if not order or order["user_id"] != user_id:
                bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            order["method"] = "cod"
            order["status"] = "cod"
            user_carts[user_id] = []  # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã

            try:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=t("pay_on_delivery_info", lang)
                )
            except Exception:
                bot.send_message(call.from_user.id, t("pay_on_delivery_info", lang))
            bot.answer_callback_query(call.id)

            notify_admin(
                f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç @{call.from_user.username or call.from_user.first_name}\n"
                f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n"
                f"–°—É–º–º–∞: {format_currency(order['total'])}"
            )
            return

        # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
        if data.startswith("pay_prepay_"):
            parts = data.split('_')
            try:
                order_id = int(parts[-1])
            except ValueError:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
                return
            order = orders.get(order_id)
            if not order or order["user_id"] != user_id:
                bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            order["method"] = "prepay"
            order["status"] = "waiting_confirmation"

            try:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=t("prepay_info", lang)
                )
            except Exception:
                bot.send_message(call.from_user.id, t("prepay_info", lang))

            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton(t("pay_done", lang), callback_data=f"pay_done_{order_id}"))
            bot.send_message(user_id, "üí≥ –û–ø–ª–∞—Ç–∏–ª–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=markup)
            bot.answer_callback_query(call.id)

            notify_admin(
                f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç @{call.from_user.username or call.from_user.first_name}\n"
                f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—Ç–∞ –ö–∞—Ä—Ç–æ–π\n"
                f"–°—É–º–º–∞: {format_currency(order['total'])}\n\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                        callback_data=f"confirm_payment_{order_id}"
                    )
                )
            )
            return

        # –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
        if data.startswith("pay_crypto_"):
            parts = data.split('_')
            try:
                order_id = int(parts[-1])
            except ValueError:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
                return
            order = orders.get(order_id)
            if not order or order["user_id"] != user_id:
                bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            order["method"] = "crypto"
            order["status"] = "waiting_confirmation"

            try:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"–û–ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –Ω–∞ –∞–¥—Ä–µ—Å:\n\n{texts.get('crypto_wallet', '–∞–¥—Ä–µ—Å_–∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞')}",
                    parse_mode="Markdown"
                )
            except Exception:
                bot.send_message(call.from_user.id, f"–û–ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –Ω–∞ –∞–¥—Ä–µ—Å:\n\n{texts.get('crypto_wallet', '–∞–¥—Ä–µ—Å_–∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞')}")

            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton(t("pay_done", lang), callback_data=f"pay_done_{order_id}"))
            bot.send_message(user_id, "üí≥ –û–ø–ª–∞—Ç–∏–ª–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=markup)
            bot.answer_callback_query(call.id)

            notify_admin(
                f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç @{call.from_user.username or call.from_user.first_name}\n"
                f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n"
                f"–°—É–º–º–∞: {format_currency(order['total'])}\n\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                        callback_data=f"confirm_payment_{order_id}"
                    )
                )
            )
            return

        # –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª "–û–ø–ª–∞—á–µ–Ω–æ" (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        if data.startswith("pay_done_"):
            try:
                order_id = int(data[9:])
            except ValueError:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
                return
            order = orders.get(order_id)
            if not order or order["user_id"] != user_id:
                bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            if order["status"] == "waiting_confirmation":
                bot.send_message(user_id,
                    "‚è≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞." if lang == "ru"
                    else "‚è≥ –í–∞—à –ø–ª–∞—Ç—ñ–∂ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                bot.answer_callback_query(call.id)
                return
            else:
                bot.answer_callback_query(call.id, "–í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
                return

        # –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É
        if data.startswith("confirm_payment_"):
            if call.from_user.id != ADMIN_CHAT:
                bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
                return
            try:
                order_id = int(data[len("confirm_payment_"):])
            except ValueError:
                bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞", show_alert=True)
                return
            order = orders.get(order_id)
            if not order:
                bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            if order["status"] != "waiting_confirmation":
                bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)
                return

            order["status"] = "paid"

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            user_id_order = order["user_id"]
            lang_user = user_language.get(user_id_order, "ru")
            bot.send_message(user_id_order,
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –∑–∞–∫–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è." if lang_user == "ru"
                else "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è.")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
            try:
                uname = bot.get_chat(user_id_order).username
            except Exception:
                uname = None
            notify_admin(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}.\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{uname or user_id_order}\n"
                f"–°—É–º–º–∞: {format_currency(order['total'])}"
            )

            bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            return

        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
        if data == "show_cart":
            show_cart(call.message)
            bot.answer_callback_query(call.id)
            return

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
        try:
            bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        except Exception:
            pass

# ---------- –ü–û–ö–ê–ó –ö–û–†–ó–ò–ù–´ ----------
def show_cart(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    cart = user_carts.get(user_id, [])
    if not cart:
        bot.send_message(user_id, texts["cart_empty_ru"] if lang == "ru" else texts["cart_empty_ua"])
        return
    text = t("cart_title", lang)
    total = 0
    for name, price in cart:
        text += f"‚Ä¢ {name} ‚Äî {format_currency(price)}\n"
        total += price
    text += (texts["cart_total_ru"] if lang == "ru" else texts["cart_total_ua"]).format(total=format_currency(total))

    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton(t("order_button", lang), callback_data="order"),
        types.InlineKeyboardButton(t("clear_cart", lang), callback_data="clear_cart")
    )
    bot.send_message(user_id, text, reply_markup=markup)

# ---------- –û–¢–ó–´–í–´ ----------
def show_reviews(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    if not reviews:
        bot.send_message(user_id, texts["reviews_list_empty_ru"] if lang == "ru" else texts["reviews_list_empty_ua"])
        return
    text = "–û—Ç–∑—ã–≤—ã:\n\n" if lang == "ru" else "–í—ñ–¥–≥—É–∫–∏:\n\n"
    for r in reviews[-10:]:
        text += r + "\n\n"
    bot.send_message(user_id, text)

# ---------- –ó–ê–ö–ê–ó–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ----------
def show_user_orders(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    user_orders = [o for o in orders.values() if o["user_id"] == user_id]
    if not user_orders:
        bot.send_message(user_id,
                         "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤." if lang == "ru" else "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n" if lang == "ru" else "–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\n"
    for o in user_orders:
        status_translations = {
            "pending": {"ru": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã", "ua": "–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏"},
            "cod": {"ru": "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", "ua": "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ"},
            "waiting_confirmation": {"ru": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "ua": "–û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"},
            "paid": {"ru": "–û–ø–ª–∞—á–µ–Ω", "ua": "–û–ø–ª–∞—á–µ–Ω–æ"},
        }
        status_text = status_translations.get(o["status"], {"ru": o["status"], "ua": o["status"]}).get(lang, o["status"])
        text += f"–ó–∞–∫–∞–∑ #{o['id']} ‚Äî {status_text}\n–°—É–º–º–∞: {format_currency(o['total'])}\n\n"
    bot.send_message(user_id, text)

# ---------- RUN ----------
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
