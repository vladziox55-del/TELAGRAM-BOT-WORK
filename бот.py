import telebot
from telebot import types

TOKEN = "8400828602:AAGmF8japcI3YkWRmvd2o9QXoohcYc4I7vQ"
bot = telebot.TeleBot(TOKEN)

ADMIN_CHAT_ID = 5539798707 # <--- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

# --- –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö ---
user_language = {}        # user_id -> "ru" –∏–ª–∏ "ua"
user_carts = {}           # user_id -> list –∏–∑ product_key
orders = {}               # order_id -> dict —Å –∑–∞–∫–∞–∑–æ–º
reviews = []              # —Å–ø–∏—Å–æ–∫ dict: {user_id, text, approved, visible}
referrals = {}            # user_id -> list user_id (—Ä–µ—Ñ–µ—Ä–∞–ª—ã)
user_spending = {}        # user_id -> —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

order_counter = 1

# --- –¢–æ–≤–∞—Ä—ã ---
cartridge_common_price = 145

PRODUCTS = {
    # Voopoo
    "voopoo_argus_3ml_07": {"name_ru": "Voopoo Argus 3ml 0.7", "name_ua": "Voopoo Argus 3ml 0.7", "price": cartridge_common_price, "category": "voopoo"},
    "voopoo_argus_3ml_10": {"name_ru": "Voopoo Argus 3ml 1.0", "name_ua": "Voopoo Argus 3ml 1.0", "price": cartridge_common_price, "category": "voopoo"},
    "voopoo_argus_3ml_04": {"name_ru": "Voopoo Argus 3ml 0.4", "name_ua": "Voopoo Argus 3ml 0.4", "price": cartridge_common_price, "category": "voopoo"},
    "voopoo_vmate_3ml_07": {"name_ru": "Voopoo Vmate 3ml 0.7", "name_ua": "Voopoo Vmate 3ml 0.7", "price": cartridge_common_price, "category": "voopoo"},
    "voopoo_vmate_2ml_07_tpd": {"name_ru": "Voopoo Vmate 2ml 0.7 (TPD)", "name_ua": "Voopoo Vmate 2ml 0.7 (TPD)", "price": cartridge_common_price, "category": "voopoo"},
    "voopoo_vmate_3ml_04": {"name_ru": "Voopoo Vmate 3ml 0.4", "name_ua": "Voopoo Vmate 3ml 0.4", "price": cartridge_common_price, "category": "voopoo"},
    "voopoo_vmate_2ml_04_tpd": {"name_ru": "Voopoo Vmate 2ml 0.4 (TPD)", "name_ua": "Voopoo Vmate 2ml 0.4 (TPD)", "price": cartridge_common_price, "category": "voopoo"},
    # Elf Bar ELFX
    "elfx_2ml_06": {"name_ru": "Elfx 2ml 0.6", "name_ua": "Elfx 2ml 0.6", "price": 135, "category": "elfx"},
    "elfx_2ml_08": {"name_ru": "Elfx 2ml 0.8", "name_ua": "Elfx 2ml 0.8", "price": 135, "category": "elfx"},
    # Vaporesso - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
    "vaporesso_xros_1_0_3ml": {"name_ru": "Vaporesso Xros Series 1.0, 3 ml", "name_ua": "Vaporesso Xros Series 1.0, 3 ml", "price": cartridge_common_price, "category": "vaporesso"},
    "vaporesso_xros_1_0_2ml": {"name_ru": "Vaporesso Xros Series 1.0, 2 ml", "name_ua": "Vaporesso Xros Series 1.0, 2 ml", "price": cartridge_common_price, "category": "vaporesso"},
    "vaporesso_xros_0_8_3ml": {"name_ru": "Vaporesso Xros Series 0.8, 3 ml", "name_ua": "Vaporesso Xros Series 0.8, 3 ml", "price": cartridge_common_price, "category": "vaporesso"},
    "vaporesso_xros_0_8_2ml": {"name_ru": "Vaporesso Xros Series 0.8, 2 ml", "name_ua": "Vaporesso Xros Series 0.8, 2 ml", "price": cartridge_common_price, "category": "vaporesso"},
    "vaporesso_xros_0_6_3ml": {"name_ru": "Vaporesso Xros Series 0.6, 3 ml", "name_ua": "Vaporesso Xros Series 0.6, 3 ml", "price": cartridge_common_price, "category": "vaporesso"},
    "vaporesso_xros_0_6_2ml": {"name_ru": "Vaporesso Xros Series 0.6, 2 ml", "name_ua": "Vaporesso Xros Series 0.6, 2 ml", "price": cartridge_common_price, "category": "vaporesso"},
    "vaporesso_xros_0_4_3ml": {"name_ru": "Vaporesso Xros Series 0.4, 3 ml", "name_ua": "Vaporesso Xros Series 0.4, 3 ml", "price": cartridge_common_price, "category": "vaporesso"},
    "vaporesso_xros_0_4_2ml": {"name_ru": "Vaporesso Xros Series 0.4, 2 ml", "name_ua": "Vaporesso Xros Series 0.4, 2 ml", "price": cartridge_common_price, "category": "vaporesso"},
}

PODS = {
    "vaporesso_xros_5_mini": {"name_ru": "Vaporesso xros 5 mini", "name_ua": "Vaporesso xros 5 mini", "price": 850},
    "vaporesso_xros_4_mini": {"name_ru": "Vaporesso xros 4 mini", "name_ua": "Vaporesso xros 4 mini", "price": 809},
    "vaporesso_xros_5": {"name_ru": "Vaporesso xros 5", "name_ua": "Vaporesso xros 5", "price": 1129},
    "elfx_pro": {"name_ru": "Elbar Bar ELFX Pro", "name_ua": "Elbar Bar ELFX Pro", "price": 849},
    "elf_bar_ev15000": {"name_ru": "Elf Bar EV15000", "name_ua": "Elf Bar EV15000", "price": 299},
    "voopoo_argus_g2": {"name_ru": "Voopoo Argus G2", "name_ua": "Voopoo Argus G2", "price": 1049},
    "voopoo_vmate_i2": {"name_ru": "Voopoo Vmate I2 (–≤—Ç–æ—Ä–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ)", "name_ua": "Voopoo Vmate I2 (–¥—Ä—É–≥–µ –ø–æ–∫–æ–ª—ñ–Ω–Ω—è)", "price": 719},
}

# --- –ü–µ—Ä–µ–≤–æ–¥—ã ---
def t(key, lang):
    texts = {
        "language_select": {"ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", "ua": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í–∏–±–µ—Ä—ñ—Ç—å —è–∑—ã–∫:"},
        "main_menu": {"ru": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "ua": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"},
        "catalog": {"ru": "–ö–∞—Ç–∞–ª–æ–≥", "ua": "–ö–∞—Ç–∞–ª–æ–≥"},
        "cartridges": {"ru": "–ö–∞—Ä—Ç—Ä–∏–¥–∂–∏", "ua": "–ö–∞—Ä—Ç—Ä–∏–¥–∂—ñ"},
        "pods": {"ru": "–ü–æ–¥ —Å–∏—Å—Ç–µ–º—ã", "ua": "–ü—ñ–¥ —Å–∏—Å—Ç–µ–º–∏"},
        "liquids": {"ru": "–ñ–∏–¥–∫–æ—Å—Ç–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "ua": "–†—ñ–¥–∏–Ω–∏ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)"},
        "back": {"ru": "–ù–∞–∑–∞–¥", "ua": "–ù–∞–∑–∞–¥"},
        "order_created": {"ru": "–ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!", "ua": "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ!"},
        "add_cart_success": {"ru": "–¢–æ–≤–∞—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", "ua": "–¢–æ–≤–∞—Ä {name} –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫"},
        "cart_empty": {"ru": "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", "ua": "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"},
        "cart_cleared": {"ru": "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", "ua": "–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ"},
        "pay_cod_info": {"ru": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.", "ua": "–í–∏ –æ–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ."},
        "pay_prepay_info": {"ru": "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π. –í–Ω–∏–º–∞–Ω–∏–µ! –ü–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –∫–∞—Ä—Ç—ã Monobank. –ò–Ω–∞—á–µ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.", 
                           "ua": "–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ—é. –£–≤–∞–≥–∞! –ü–µ—Ä–µ–∫–∞–∑–∏ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑ –∫–∞—Ä—Ç–∫–∏ Monobank. –Ü–Ω–∞–∫—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ."},
        "pay_crypto_info": {"ru": "–û–ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –Ω–∞ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ.", "ua": "–û–ø–ª–∞—Ç—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é –∑–∞ –∞–¥—Ä–µ—Å–æ—é –Ω–∏–∂—á–µ."},
        "pay_done": {"ru": "–û–ø–ª–∞—á–µ–Ω–æ", "ua": "–û–ø–ª–∞—á–µ–Ω–æ"},
        "pay_done_wait": {"ru": "–í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", "ua": "–í–∞—à –ø–ª–∞—Ç—ñ–∂ –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."},
        "pay_confirmed": {"ru": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.", "ua": "–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –ù–µ–∑–∞–±–∞—Ä–æ–º –∑ –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è."},
        "referral_notify": {"ru": "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å—É–º–º—É {sum} –≥—Ä–Ω. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ - –ª—é–±—É—é –∂–∏–¥–∫–æ—Å—Ç—å –∏–∑ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞ –∏–ª–∏ –ª—é–±—ã–µ –¥–≤–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ –Ω–∞ –≤—ã–±–æ—Ä. –°–ø–∞—Å–∏–±–æ —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏!", 
                           "ua": "–í–∞—à—ñ —Ä–µ—Ñ–µ—Ä–∞–ª–∏ –∑—Ä–æ–±–∏–ª–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ —Å—É–º—É {sum} –≥—Ä–Ω. –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ - –±—É–¥—å-—è–∫—É —Ä—ñ–¥–∏–Ω—É –∑ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É –∞–±–æ –±—É–¥—å-—è–∫—ñ –¥–≤–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂—ñ –Ω–∞ –≤–∏–±—ñ—Ä. –î—è–∫—É—î–º–æ, —â–æ –∑–∞–ª–∏—à–∞—î—Ç–µ—Å—å –∑ –Ω–∞–º–∏!"},
        "review_prompt": {"ru": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:", "ua": "–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫:"},
        "review_added": {"ru": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", "ua": "–î—è–∫—É—î–º–æ –∑–∞ –≤—ñ–¥–≥—É–∫! –í—ñ–Ω –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."},
        "order_status_paid": {"ru": "–û–ø–ª–∞—á–µ–Ω ‚úÖ", "ua": "–û–ø–ª–∞—á–µ–Ω–æ ‚úÖ"},
        "order_status_completed": {"ru": "–ó–∞–≤–µ—Ä—à—ë–Ω ‚úÖ", "ua": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ"},
        "confirm_received": {"ru": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", "ua": "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è"},
        "orders_empty": {"ru": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", "ua": "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å."},
    }
    return texts.get(key, {}).get(lang, texts.get(key, {}).get("ru", key))

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã ---
def format_currency(amount):
    return f"{amount} –≥—Ä–Ω"

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ---
def notify_admin(text, reply_markup=None):
    bot.send_message(ADMIN_CHAT_ID, text, reply_markup=reply_markup)
 
 # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu_markup(lang):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìö " + t("catalog", lang), "üõí –ó–∞–∫–∞–∑–∞—Ç—å")
    markup.row("üß∫ –ö–æ—Ä–∑–∏–Ω–∞", "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
    markup.row("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    return markup

# --- –ö–∞—Ç–∞–ª–æ–≥: –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ---
def catalog_menu_markup(lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(t("cartridges", lang), callback_data="cat_cartridges"),
        types.InlineKeyboardButton(t("pods", lang), callback_data="cat_pods"),
        types.InlineKeyboardButton(t("liquids", lang), callback_data="cat_liquids"),
        types.InlineKeyboardButton(t("back", lang), callback_data="back_main")
    )
    return markup

# --- –ú–µ–Ω—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–∞—Ä—Ç—Ä–∏–¥–∂–µ–π ---
def cartridges_menu_markup(lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("Voopoo", callback_data="cat_voopoo"),
        types.InlineKeyboardButton("Vaporesso", callback_data="cat_vaporesso"),
        types.InlineKeyboardButton("Elf Bar ELFX", callback_data="cat_elfx"),
        types.InlineKeyboardButton(t("back", lang), callback_data="cat_cartridges_back")
    )
    return markup

# --- –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
def products_menu_markup(category, lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for key, p in PRODUCTS.items():
        if p["category"] == category:
            name = p["name_ru"] if lang == "ru" else p["name_ua"]
            markup.add(types.InlineKeyboardButton(f"{name} - {p['price']} –≥—Ä–Ω", callback_data=f"add_{key}"))
    markup.add(types.InlineKeyboardButton(t("back", lang), callback_data="cat_cartridges"))
    return markup

# --- –ú–µ–Ω—é –ø–æ–¥—Å–∏—Å—Ç–µ–º (Pods) ---
def pods_menu_markup(lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    for key, p in PODS.items():
        name = p["name_ru"] if lang == "ru" else p["name_ua"]
        markup.add(types.InlineKeyboardButton(f"{name} - {p['price']} –≥—Ä–Ω", callback_data=f"add_pod_{key}"))
    markup.add(types.InlineKeyboardButton(t("back", lang), callback_data="cat_pods_back"))
    return markup

# --- –ü—É—Å—Ç–æ–µ –º–µ–Ω—é –¥–ª—è –∂–∏–¥–∫–æ—Å—Ç–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) ---
def liquids_menu_markup(lang):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(t("back", lang), callback_data="cat_liquids_back"))
    return markup

# --- –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_user_cart(user_id):
    return user_carts.setdefault(user_id, [])

# --- –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É ---
def add_to_cart(user_id, product_key):
    cart = get_user_cart(user_id)
    cart.append(product_key)

# --- –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É ---
def clear_cart(user_id):
    user_carts[user_id] = []

# --- –ü–æ–¥—Å—á–µ—Ç —Å—É–º–º—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ ---
def cart_total(user_id):
    cart = get_user_cart(user_id)
    total = 0
    for key in cart:
        # —É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ PRODUCTS –∏ PODS
        if key.startswith("pod_"):
            pod_key = key[4:]
            if pod_key in PODS:
                total += PODS[pod_key]["price"]
        elif key in PRODUCTS:
            total += PRODUCTS[key]["price"]
    return total

# --- –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ ---
def create_order(user_id):
    global order_counter
    cart = get_user_cart(user_id)
    if not cart:
        return None
    total = cart_total(user_id)
    order_id = order_counter
    order_counter += 1
    orders[order_id] = {
        "id": order_id,
        "user_id": user_id,
        "items": cart.copy(),
        "total": total,
        "status": "created",
        "payment_method": None,
        "paid": False,
        "confirmed": False
    }
    clear_cart(user_id)
    return order_id

# --- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ ---
def format_order_items(items, lang):
    lines = []
    for key in items:
        if key.startswith("pod_"):
            pod_key = key[4:]
            if pod_key in PODS:
                name = PODS[pod_key]["name_ru"] if lang == "ru" else PODS[pod_key]["name_ua"]
                price = PODS[pod_key]["price"]
                lines.append(f"{name} - {price} –≥—Ä–Ω")
        elif key in PRODUCTS:
            p = PRODUCTS[key]
            name = p["name_ru"] if lang == "ru" else p["name_ua"]
            price = p["price"]
            lines.append(f"{name} - {price} –≥—Ä–Ω")
    return "\n".join(lines)
    
    
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    if user_id not in user_language:
        # –ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row("–†—É—Å—Å–∫–∏–π üá∑üá∫", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=markup)
    else:
        lang = user_language[user_id]
        bot.send_message(user_id, t("main_menu", lang), reply_markup=main_menu_markup(lang))


@bot.message_handler(func=lambda m: m.text in ["–†—É—Å—Å–∫–∏–π üá∑üá∫", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶"])
def set_language(message):
    user_id = message.from_user.id
    if message.text == "–†—É—Å—Å–∫–∏–π üá∑üá∫":
        user_language[user_id] = "ru"
    else:
        user_language[user_id] = "ua"
    lang = user_language[user_id]
    bot.send_message(user_id, t("main_menu", lang), reply_markup=main_menu_markup(lang))


@bot.message_handler(func=lambda m: True)
def main_menu_handler(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    text = message.text

    if text == "üìö " + t("catalog", lang):
        bot.send_message(user_id, t("catalog", lang), reply_markup=catalog_menu_markup(lang))
    elif text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å":
        bot.send_message(user_id, t("catalog", lang) + " (–∑–∞–∫–∞–∑)", reply_markup=catalog_menu_markup(lang))
    elif text == "üß∫ –ö–æ—Ä–∑–∏–Ω–∞":
        cart = get_user_cart(user_id)
        if not cart:
            bot.send_message(user_id, t("cart_empty", lang))
        else:
            total = cart_total(user_id)
            text_cart = format_order_items(cart, lang) + f"\n\n–ò—Ç–æ–≥–æ: {format_currency(total)}"
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"),
                types.InlineKeyboardButton(t("back", lang), callback_data="back_main"),
                types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
            )
            bot.send_message(user_id, text_cart, reply_markup=markup)
    elif text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞":
        # –ü–æ–∫–∞–∂–µ–º —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ –∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ
        refs = referrals.get(user_id, [])
        spent = user_spending.get(user_id, 0)
        ref_link = f"https://t.me/your_bot_username?start={user_id}"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username
        bot.send_message(user_id,
                         f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {len(refs)} —á–µ–ª–æ–≤–µ–∫(–∞).\n"
                         f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤–∞—à–∏–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: {format_currency(spent)}\n"
                         f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}")
    elif text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
        user_orders = [o for o in orders.values() if o["user_id"] == user_id]
        if not user_orders:
            bot.send_message(user_id, t("orders_empty", lang))
        else:
            for o in user_orders:
                items_text = format_order_items(o["items"], lang)
                status_text = t("order_status_paid", lang) if o["paid"] else o["status"]
                msg = f"–ó–∞–∫–∞–∑ #{o['id']}:\n{items_text}\n–°—É–º–º–∞: {format_currency(o['total'])}\n–°—Ç–∞—Ç—É—Å: {status_text}"
                markup = types.InlineKeyboardMarkup()
                if o["paid"] and not o["confirmed"]:
                    markup.add(types.InlineKeyboardButton(t("confirm_received", lang), callback_data=f"confirm_{o['id']}"))
                bot.send_message(user_id, msg, reply_markup=markup)
    elif text == "‚≠ê –û—Ç–∑—ã–≤—ã":
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="review_add"),
            types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="review_show"),
            types.InlineKeyboardButton(t("back", lang), callback_data="back_main")
        )
        bot.send_message(user_id, "–û—Ç–∑—ã–≤—ã", reply_markup=markup)
    else:
        bot.send_message(user_id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.")


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    data = call.data

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
    if data == "back_main":
        bot.edit_message_text(t("main_menu", lang), user_id, call.message.message_id, reply_markup=None)
        bot.send_message(user_id, t("main_menu", lang), reply_markup=main_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    # –ö–∞—Ç–∞–ª–æ–≥
    if data == "cat_cartridges":
        bot.edit_message_text(t("cartridges", lang), user_id, call.message.message_id,
                              reply_markup=cartridges_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return
    if data == "cat_pods":
        bot.edit_message_text(t("pods", lang), user_id, call.message.message_id,
                              reply_markup=pods_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return
    if data == "cat_liquids":
        bot.edit_message_text(t("liquids", lang), user_id, call.message.message_id,
                              reply_markup=liquids_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    # –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ ‚Äî –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data == "cat_voopoo":
        bot.edit_message_text("Voopoo", user_id, call.message.message_id,
                              reply_markup=products_menu_markup("voopoo", lang))
        bot.answer_callback_query(call.id)
        return
    if data == "cat_vaporesso":
        bot.edit_message_text("Vaporesso", user_id, call.message.message_id,
                              reply_markup=products_menu_markup("vaporesso", lang))
        bot.answer_callback_query(call.id)
        return
    if data == "cat_elfx":
        bot.edit_message_text("Elf Bar ELFX", user_id, call.message.message_id,
                              reply_markup=products_menu_markup("elfx", lang))
        bot.answer_callback_query(call.id)
        return

    if data == "cat_cartridges_back":
        bot.edit_message_text(t("catalog", lang), user_id, call.message.message_id,
                              reply_markup=catalog_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
    if data.startswith("add_"):
        product_key = data[4:]
        add_to_cart(user_id, product_key)
        product_name = ""
        if product_key.startswith("pod_"):
            pod_key = product_key[4:]
            product_name = PODS.get(pod_key, {}).get("name_ru", "–¢–æ–≤–∞—Ä")
        else:
            product_name = PRODUCTS.get(product_key, {}).get("name_ru", "–¢–æ–≤–∞—Ä")
        bot.answer_callback_query(call.id, text=f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {product_name}")
        return

    # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    if data == "clear_cart":
        clear_cart(user_id)
        bot.edit_message_text(t("cart_cleared", lang), user_id, call.message.message_id)
        bot.answer_callback_query(call.id)
        return

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    if data == "checkout":
        order_id = create_order(user_id)
        if not order_id:
            bot.answer_callback_query(call.id, text="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data=f"pay_cod_{order_id}"),
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π", callback_data=f"pay_card_{order_id}"),
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data=f"pay_crypto_{order_id}"),
            types.InlineKeyboardButton(t("back", lang), callback_data="back_main")
        )
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:", user_id, call.message.message_id,
                              reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
    if data.startswith("pay_cod_"):
        order_id = int(data.split("_")[-1])
        orders[order_id]["payment_method"] = "cod"
        orders[order_id]["paid"] = False
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        notify_admin(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or call.from_user.id} –æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑ #{order_id} —Å –æ–ø–ª–∞—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.")
        bot.edit_message_text(t("pay_cod_info", lang), user_id, call.message.message_id)
        bot.answer_callback_query(call.id)
        return

    # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
    if data.startswith("pay_card_"):
        order_id = int(data.split("_")[-1])
        orders[order_id]["payment_method"] = "card"
        orders[order_id]["paid"] = False
        payment_info = (
            f"{t('pay_prepay_info', lang)}\n\n"
            "–í–ª–∞–¥–∏—Å–ª–∞–≤ –ì.\n"
            "4441 1110 3909 5051\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(t("pay_done", lang), callback_data=f"paid_confirm_{order_id}"))
        bot.edit_message_text(payment_info, user_id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π
    if data.startswith("pay_crypto_"):
        order_id = int(data.split("_")[-1])
        orders[order_id]["payment_method"] = "crypto"
        orders[order_id]["paid"] = False
        payment_info = (
            f"{t('pay_crypto_info', lang)}\n\n"
            "TON Wallet:\n"
            "UQDjclQadIIq-DUoTNY53oHfcp9WVi5mRVnUVxVUnQ-vznEc\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(t("pay_done", lang), callback_data=f"paid_confirm_{order_id}"))
        bot.edit_message_text(payment_info, user_id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if data.startswith("paid_confirm_"):
        order_id = int(data.split("_")[-1])
        bot.edit_message_text(t("pay_done_wait", lang), user_id, call.message.message_id)
        notify_admin(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or call.from_user.id} —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ #{order_id}.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"admin_confirm_{order_id}")
            )
        )
        orders[order_id]["paid"] = True
        bot.answer_callback_query(call.id)
        return

    # –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É
    if data.startswith("admin_confirm_"):
        if call.from_user.id != ADMIN_CHAT_ID:
            bot.answer_callback_query(call.id, text="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        order_id = int(data.split("_")[-1])
        orders[order_id]["paid"] = True
        orders[order_id]["status"] = "paid"
        user_id_order = orders[order_id]["user_id"]
        bot.send_message(user_id_order, t("pay_confirmed", user_language.get(user_id_order, "ru")))
        bot.edit_message_text(f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—É–º–º
        referrer_id = None
        for ref_id, refs in referrals.items():
            if user_id_order in refs:
                referrer_id = ref_id
                break
        if referrer_id:
            user_spending[referrer_id] = user_spending.get(referrer_id, 0) + orders[order_id]["total"]
            if user_spending[referrer_id] >= 4100:
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∞—Ä–∫–µ
                bot.send_message(referrer_id, t("referral_notify", user_language.get(referrer_id, "ru")).format(sum=user_spending[referrer_id]))

        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if data.startswith("confirm_"):
        order_id = int(data.split("_")[-1])
        order = orders.get(order_id)
        if order and order["user_id"] == user_id:
            order["confirmed"] = True
            order["status"] = "completed"
            bot.edit_message_text(f"–ó–∞–∫–∞–∑ #{order_id} {t('order_status_completed', lang)}", user_id, call.message.message_id)
            bot.answer_callback_query(call.id)
        else:
            bot.answer_callback_query(call.id, text="–û—à–∏–±–∫–∞.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
    if data == "review_add":
        msg = bot.send_message(user_id, t("review_prompt", lang))
        bot.register_next_step_handler(msg, handle_review_text)
        bot.answer_callback_query(call.id)
        return
    if data == "review_show":
        approved_reviews = [r for r in reviews if r.get("approved")]
        if not approved_reviews:
            bot.send_message(user_id, "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        else:
            text = "\n\n".join([r["text"] for r in approved_reviews[-10:]])
            bot.send_message(user_id, text)
        bot.answer_callback_query(call.id)
        return

def handle_review_text(message):
    user_id = message.from_user.id
    text = message.text.strip()
    if len(text) < 3:
        bot.send_message(user_id, "–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    reviews.append({"user_id": user_id, "text": text, "approved": False})
    bot.send_message(user_id, t("review_added", user_language.get(user_id, "ru")))
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"review_approve_{len(reviews)-1}"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"review_delete_{len(reviews)-1}")
    )
    bot.send_message(ADMIN_CHAT_ID, f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or user_id}:\n\n{text}", reply_markup=markup)

# –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –∞–¥–º–∏–Ω–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith("review_"))
def review_moderation_handler(call):
    if call.from_user.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    data = call.data
    action, idx = data.split("_")[1], int(data.split("_")[2])
    if idx < 0 or idx >= len(reviews):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")
        return
    if action == "approve":
        reviews[idx]["approved"] = True
        bot.edit_message_text("–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω.", call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
    elif action == "delete":
        reviews.pop(idx)
        bot.edit_message_text("–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.", call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
        
@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    text = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    ref_id = None
    if " " in text:
        parts = text.split()
        if len(parts) > 1 and parts[1].isdigit():
            ref_id = int(parts[1])
    # –ï—Å–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏–º —è–∑—ã–∫ –∏ –¥–æ–±–∞–≤–∏–º –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    if user_id not in user_language:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row("–†—É—Å—Å–∫–∏–π üá∑üá∫", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶")
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=markup)
    else:
        lang = user_language[user_id]
        bot.send_message(user_id, t("main_menu", lang), reply_markup=main_menu_markup(lang))

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª –∏ –æ–Ω –Ω–µ —Å–∞–º —Å–µ–±–µ
    if ref_id and ref_id != user_id:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
        refs = referrals.setdefault(ref_id, [])
        if user_id not in refs:
            refs.append(user_id)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def add_to_cart(user_id, product_key):
    cart = user_carts.setdefault(user_id, [])
    cart.append(product_key)

def clear_cart(user_id):
    user_carts[user_id] = []

def cart_total(user_id):
    cart = get_user_cart(user_id)
    total = 0
    for key in cart:
        if key.startswith("pod_"):
            total += PODS.get(key[4:], {}).get("price", 0)
        else:
            total += PRODUCTS.get(key, {}).get("price", 0)
    return total

def format_order_items(items, lang):
    lines = []
    for key in items:
        if key.startswith("pod_"):
            p = PODS.get(key[4:], None)
            if p:
                name = p["name_ru"] if lang == "ru" else p["name_ua"]
                lines.append(f"‚Ä¢ {name} - {format_currency(p['price'])}")
        else:
            p = PRODUCTS.get(key, None)
            if p:
                name = p["name_ru"] if lang == "ru" else p["name_ua"]
                lines.append(f"‚Ä¢ {name} - {format_currency(p['price'])}")
    return "\n".join(lines)

def create_order(user_id):
    cart = get_user_cart(user_id)
    if not cart:
        return None
    total = cart_total(user_id)
    global order_counter
    order_id = order_counter
    order_counter += 1
    orders[order_id] = {
        "id": order_id,
        "user_id": user_id,
        "items": cart.copy(),
        "total": total,
        "status": "created",
        "paid": False,
        "confirmed": False,
        "payment_method": None,
    }
    clear_cart(user_id)
    return order_id
    
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    data = call.data

    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_main":
        bot.edit_message_text(t("main_menu", lang), user_id, call.message.message_id, reply_markup=None)
        bot.send_message(user_id, t("main_menu", lang), reply_markup=main_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é -> –ö–∞—Ç–∞–ª–æ–≥
    if data == "catalog":
        bot.edit_message_text(t("catalog", lang), user_id, call.message.message_id, reply_markup=catalog_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    # –ö–∞—Ç–∞–ª–æ–≥ -> –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏
    if data == "cat_cartridges":
        bot.edit_message_text(t("cartridges", lang), user_id, call.message.message_id, reply_markup=cartridges_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    # –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ -> Voopoo
    if data == "cat_voopoo":
        bot.edit_message_text("Voopoo - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", user_id, call.message.message_id,
                              reply_markup=products_menu_markup("voopoo", lang))
        bot.answer_callback_query(call.id)
        return

    # –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ -> Vaporesso
    if data == "cat_vaporesso":
        bot.edit_message_text("Vaporesso - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", user_id, call.message.message_id,
                              reply_markup=products_menu_markup("vaporesso", lang))
        bot.answer_callback_query(call.id)
        return

    # –ö–∞—Ä—Ç—Ä–∏–¥–∂–∏ -> Elf Bar ELFX
    if data == "cat_elfx":
        bot.edit_message_text("Elf Bar ELFX - –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", user_id, call.message.message_id,
                              reply_markup=products_menu_markup("elfx", lang))
        bot.answer_callback_query(call.id)
        return

    # –ö–∞—Ç–∞–ª–æ–≥ -> –ü–æ–¥ —Å–∏—Å—Ç–µ–º—ã (pods)
    if data == "cat_pods":
        markup = types.InlineKeyboardMarkup(row_width=1)
        for key, p in PODS.items():
            name = p["name_ru"] if lang == "ru" else p["name_ua"]
            markup.add(types.InlineKeyboardButton(f"{name} - {p['price']} –≥—Ä–Ω", callback_data=f"add_{key}"))
        markup.add(types.InlineKeyboardButton(t("back", lang), callback_data="catalog"))
        bot.edit_message_text(t("pods", lang), user_id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –ö–∞—Ç–∞–ª–æ–≥ -> –ñ–∏–¥–∫–æ—Å—Ç–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    if data == "cat_liquids":
        bot.answer_callback_query(call.id, t("liquids", lang), show_alert=True)
        return

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞—Ö
    if data == "cat_cartridges_back":
        bot.edit_message_text(t("catalog", lang), user_id, call.message.message_id, reply_markup=catalog_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    if data.startswith("add_"):
        product_key = data[4:]
        if product_key in PRODUCTS or product_key in PODS:
            add_to_cart(user_id, product_key)
            name = (PRODUCTS.get(product_key) or PODS.get(product_key))["name_ru"] if lang == "ru" else (PRODUCTS.get(product_key) or PODS.get(product_key))["name_ua"]
            bot.answer_callback_query(call.id, t("add_cart_success", lang).format(name=name))
        else:
            bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    if data == "show_cart":
        cart = get_user_cart(user_id)
        if not cart:
            bot.answer_callback_query(call.id, t("cart_empty", lang), show_alert=True)
            return
        text = "üß∫ –ö–æ—Ä–∑–∏–Ω–∞:\n\n" + format_order_items(cart, lang) + f"\n\n–ò—Ç–æ–≥–æ: {format_currency(cart_total(user_id))}"
        markup = types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            types.InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order"),
            types.InlineKeyboardButton(t("cart_cleared", lang), callback_data="clear_cart"),
            types.InlineKeyboardButton(t("back", lang), callback_data="back_main")
        )
        bot.edit_message_text(text, user_id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    if data == "clear_cart":
        clear_cart(user_id)
        bot.answer_callback_query(call.id, t("cart_cleared", lang))
        bot.delete_message(user_id, call.message.message_id)
        return

    # –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ - –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    if data == "order":
        cart = get_user_cart(user_id)
        if not cart:
            bot.answer_callback_query(call.id, t("cart_empty", lang), show_alert=True)
            return
        total = cart_total(user_id)
        order_id = create_order(user_id)
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data=f"pay_cod_{order_id}"),
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π", callback_data=f"pay_prepay_{order_id}"),
            types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", callback_data=f"pay_crypto_{order_id}"),
            types.InlineKeyboardButton(t("back", lang), callback_data="show_cart")
        )
        bot.send_message(user_id, t("order_created", lang).format(order_id=order_id), reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
    if data.startswith("pay_cod_"):
        order_id = int(data.split("_")[-1])
        order = orders.get(order_id)
        if not order or order["user_id"] != user_id:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        order["payment_method"] = "cod"
        order["status"] = "paid"
        bot.edit_message_text(t("pay_cod_info", lang), user_id, call.message.message_id)
        bot.answer_callback_query(call.id)
        notify_admin(f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id} –æ—Ç @{call.from_user.username or call.from_user.first_name}\n–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n–°—É–º–º–∞: {format_currency(order['total'])}")
        return

    # –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
    if data.startswith("pay_prepay_"):
        order_id = int(data.split("_")[-1])
        order = orders.get(order_id)
        if not order or order["user_id"] != user_id:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        order["payment_method"] = "card"
        order["status"] = "waiting_confirmation"
        text = t("pay_prepay_info", lang) + "\n\n" + "–í–ª–∞–¥–∏—Å–ª–∞–≤ –ì. 4441111039095051"
        bot.edit_message_text(text, user_id, call.message.message_id)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(t("pay_done", lang), callback_data=f"pay_done_{order_id}"))
        bot.send_message(user_id, "üí≥ –û–ø–ª–∞—Ç–∏–ª–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
    if data.startswith("pay_crypto_"):
        order_id = int(data.split("_")[-1])
        order = orders.get(order_id)
        if not order or order["user_id"] != user_id:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        order["payment_method"] = "crypto"
        order["status"] = "waiting_confirmation"
        crypto_text = t("pay_crypto_info", lang) + "\n\n" + "UQDjclQadIIq-DUoTNY53oHfcp9WVi5mRVnUVxVUnQ-vznEc (TON)"
        bot.edit_message_text(crypto_text, user_id, call.message.message_id)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(t("pay_done", lang), callback_data=f"pay_done_{order_id}"))
        bot.send_message(user_id, "üí≥ –û–ø–ª–∞—Ç–∏–ª–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∫–Ω–æ–ø–∫–∞ "–û–ø–ª–∞—á–µ–Ω–æ")
    if data.startswith("pay_done_"):
        order_id = int(data.split("_")[-1])
        order = orders.get(order_id)
        if not order or order["user_id"] != user_id:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if order["status"] != "waiting_confirmation":
            bot.answer_callback_query(call.id, "–í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)
            return
        order["status"] = "waiting_admin_confirmation"
        bot.send_message(user_id, t("pay_done_wait", lang))

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ #{order_id}", callback_data=f"admin_confirm_{order_id}"))

        notify_admin(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{call.from_user.username or call.from_user.first_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ #{order_id}, —Å—É–º–º–∞: {format_currency(order['total'])}", reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º
    if data.startswith("admin_confirm_") and user_id == ADMIN_CHAT_ID:
        order_id = int(data.split("_")[-1])
        order = orders.get(order_id)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if order["status"] != "waiting_admin_confirmation":
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            return
        order["status"] = "paid"
        bot.answer_callback_query(call.id, f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        buyer_id = order["user_id"]
        lang_buyer = user_language.get(buyer_id, "ru")
        bot.send_message(buyer_id, t("pay_confirmed", lang_buyer))

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
        referrer = None
        for ref, referred_list in referrals.items():
            if buyer_id in referred_list:
                referrer = ref
                break
        if referrer:
            user_spending[referrer] = user_spending.get(referrer, 0) + order["total"]
            if user_spending[referrer] >= 4100:
                lang_ref = user_language.get(referrer, "ru")
                bot.send_message(referrer, t("referral_notify", lang_ref).format(sum=user_spending[referrer]))

        return
        
     # --- –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤ ---
waiting_for_review = set()  # user_id, –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–∏—à–µ—Ç –æ—Ç–∑—ã–≤

@bot.message_handler(func=lambda m: m.from_user.id in waiting_for_review)
def handle_review_message(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    text = message.text.strip()
    if not text:
        bot.reply_to(message, t("review_prompt", lang))
        return
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ —Å–ø–∏—Å–æ–∫, approved=False
    reviews.append({"user_id": user_id, "text": text, "approved": False})
    waiting_for_review.remove(user_id)
    bot.reply_to(message, t("review_added", lang))
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    idx = len(reviews) - 1
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"show_review_{idx}"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"del_review_{idx}")
    )
    notify_admin(f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or message.from_user.first_name}:\n\n{text}", reply_markup=markup)

# --- –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤ ---
waiting_for_review = set()  # user_id, –∫—Ç–æ —Å–µ–π—á–∞—Å –ø–∏—à–µ—Ç –æ—Ç–∑—ã–≤

@bot.message_handler(func=lambda m: m.from_user.id in waiting_for_review)
def handle_review_message(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    text = message.text.strip()
    if not text:
        bot.reply_to(message, t("review_prompt", lang))
        return
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤ –≤ —Å–ø–∏—Å–æ–∫, approved=False
    reviews.append({"user_id": user_id, "text": text, "approved": False})
    waiting_for_review.remove(user_id)
    bot.reply_to(message, t("review_added", lang))
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    idx = len(reviews) - 1
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_review_{idx}"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_review_{idx}")
    )
    notify_admin(f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or message.from_user.first_name}:\n\n{text}", reply_markup=markup)

# --- –ú–æ–∏ –∑–∞–∫–∞–∑—ã ---
def user_orders_menu(user_id):
    lang = user_language.get(user_id, "ru")
    user_orders = [o for o in orders.values() if o["user_id"] == user_id]
    if not user_orders:
        return t("orders_empty", lang), None
    text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
    markup = types.InlineKeyboardMarkup(row_width=1)
    for o in user_orders:
        status = t("order_status_paid", lang) if o["status"] == "paid" else t("order_status_completed", lang) if o["status"] == "completed" else o["status"]
        text += f"#{o['id']} ‚Äî {format_currency(o['total'])} ‚Äî {status}\n"
        if o["status"] == "paid":
            markup.add(types.InlineKeyboardButton(f"{t('confirm_received', lang)} #{o['id']}", callback_data=f"confirm_received_{o['id']}"))
    markup.add(types.InlineKeyboardButton(t("back", lang), callback_data="back_main"))
    return text, markup

@bot.callback_query_handler(func=lambda call: call.data.startswith("my_orders"))
def my_orders_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    text, markup = user_orders_menu(user_id)
    if markup:
        bot.edit_message_text(text, user_id, call.message.message_id, reply_markup=markup)
    else:
        bot.edit_message_text(text, user_id, call.message.message_id)
    bot.answer_callback_query(call.id)

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_received_"))
def confirm_received_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    order_id = int(call.data.split("_")[-1])
    order = orders.get(order_id)
    if not order or order["user_id"] != user_id:
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if order["status"] != "paid":
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", show_alert=True)
        return
    order["status"] = "completed"
    bot.edit_message_text(f"–ó–∞–∫–∞–∑ #{order_id} {t('order_status_completed', lang)}", user_id, call.message.message_id)
    bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")
    
    import hashlib

# --- –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
def get_referral_link(user_id):
    base_url = "https://t.me/your_bot_username?start="
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Ö—ç—à –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ user_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    ref_code = str(user_id)
    return base_url + ref_code

# --- –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if message.text and len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        try:
            referrer_id = int(ref_code)
            if referrer_id != user_id:
                referrals.setdefault(referrer_id, set()).add(user_id)
        except ValueError:
            pass
    
    if user_id not in user_language:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ (–ø—Ä–∏–º–µ—Ä)
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="set_lang_ru"),
            types.InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶", callback_data="set_lang_ua")
        )
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É", reply_markup=markup)
    else:
        send_main_menu(user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_lang_"))
def set_language(call):
    user_id = call.from_user.id
    lang_code = call.data.split("_")[-1]
    user_language[user_id] = lang_code
    bot.answer_callback_query(call.id, f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–†—É—Å—Å–∫–∏–π' if lang_code == 'ru' else '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'}")
    send_main_menu(user_id)

# --- –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ ---
def referral_menu_markup(user_id):
    lang = user_language.get(user_id, "ru")
    ref_list = referrals.get(user_id, set())
    count = len(ref_list)
    spent = user_spending.get(user_id, 0)

    text = (f"–í—ã –ø—Ä–∏–≤–µ–ª–∏: {count} —á–µ–ª–æ–≤–µ–∫\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {format_currency(spent)}\n\n"
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{get_referral_link(user_id)}")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(t("back", lang), callback_data="back_main"))
    return text, markup

@bot.message_handler(func=lambda m: m.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
def referral_system_handler(message):
    user_id = message.from_user.id
    text, markup = referral_menu_markup(user_id)
    bot.send_message(user_id, text, reply_markup=markup)

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –ø–æ–∫—É–ø–æ–∫ —É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã ---
def update_referral_spending(user_id, amount):
    # –ù–∞–π—Ç–∏, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª user_id
    for referrer, refs in referrals.items():
        if user_id in refs:
            user_spending[referrer] = user_spending.get(referrer, 0) + amount
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ 4100
            if user_spending[referrer] >= 4100:
                lang = user_language.get(referrer, "ru")
                text = t("referral_notify", lang).format(sum=user_spending[referrer])
                bot.send_message(referrer, text)

# --- –í—ã–∑–æ–≤ update_referral_spending() –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã ---
# –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
# update_referral_spending(order["user_id"], order["total"])

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ ---
def reviews_menu_markup(lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_review"),
        types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", callback_data="view_reviews"),
        types.InlineKeyboardButton(t("back", lang), callback_data="back_main")
    )
    return markup

def view_reviews_text(lang):
    approved_reviews = [r for r in reviews if r.get("approved")]
    if not approved_reviews:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤." if lang == "ru" else "–ü–æ–∫–∏ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤."
    text = ""
    for i, review in enumerate(approved_reviews, 1):
        text += f"{i}. {review['text']}\n\n"
    return text

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    data = call.data

    # ... –∑–¥–µ—Å—å –∏–¥—É—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

    if data == "reviews_menu":
        bot.edit_message_text("–û—Ç–∑—ã–≤—ã:" if lang == "ru" else "–í—ñ–¥–≥—É–∫–∏:", user_id, call.message.message_id, reply_markup=reviews_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    if data == "leave_review":
        msg = bot.send_message(user_id, t("review_prompt", lang))
        bot.register_next_step_handler(msg, process_review_step)
        bot.answer_callback_query(call.id)
        return

    if data == "view_reviews":
        text = view_reviews_text(lang)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(t("back", lang), callback_data="reviews_menu"))
        bot.edit_message_text(text, user_id, call.message.message_id, reply_markup=markup)
        bot.answer_callback_query(call.id)
        return

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏
    if data.startswith("approve_review_") and user_id == ADMIN_CHAT_ID:
        idx = int(data.split("_")[-1])
        if 0 <= idx < len(reviews):
            reviews[idx]["approved"] = True
            bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω")
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if data.startswith("delete_review_") and user_id == ADMIN_CHAT_ID:
        idx = int(data.split("_")[-1])
        if 0 <= idx < len(reviews):
            reviews.pop(idx)
            bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω")
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

def process_review_step(message):
    user_id = message.from_user.id
    text = message.text
    reviews.append({"user_id": user_id, "text": text, "approved": False})
    bot.send_message(user_id, t("review_added", user_language.get(user_id, "ru")))
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    idx = len(reviews) - 1
    markup.add(
        types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"approve_review_{idx}"),
        types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"delete_review_{idx}")
    )
    notify_admin(f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or message.from_user.first_name}:\n\n{text}", reply_markup=markup)
    
    # --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ---

def referral_menu_markup(lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referral_stats"),
        types.InlineKeyboardButton(t("back", lang), callback_data="back_main")
    )
    return markup

@bot.message_handler(func=lambda message: message.text in ["üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "Referral system"])
def referral_menu(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    bot.send_message(user_id, "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", reply_markup=referral_menu_markup(lang))

@bot.callback_query_handler(func=lambda call: call.data.startswith("referral_"))
def referral_callback_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    data = call.data

    if data == "referral_stats":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –∏—Ö —Å—É–º–º—É –ø–æ–∫—É–ø–æ–∫
        refs = referrals.get(user_id, [])
        total_spent = user_spending.get(user_id, 0)

        text = f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {len(refs)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_spent} –≥—Ä–Ω.\n\n"
        text += f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/YourBotUsername?start={user_id}\n\n"
        text += ("üéÅ –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Å—É–º–º—ã 4100 –≥—Ä–Ω –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –ª—é–±—É—é –∂–∏–¥–∫–æ—Å—Ç—å –∏–ª–∏ –¥–≤–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞ –Ω–∞ –≤—ã–±–æ—Ä!\n"
                 "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏!")

        bot.edit_message_text(text, user_id, call.message.message_id, reply_markup=referral_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    if data == "back_main":
        bot.edit_message_text(t("main_menu", lang), user_id, call.message.message_id, reply_markup=main_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

# --- –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º ---
@bot.message_handler(commands=["start"])
def start_handler(message):
    user_id = message.from_user.id
    lang = "ru"  # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
    user_language[user_id] = lang

    args = message.text.split()
    if len(args) > 1:
        ref_id_str = args[1]
        try:
            ref_id = int(ref_id_str)
            if ref_id != user_id:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                referrals.setdefault(ref_id, set()).add(user_id)
        except Exception:
            pass

    bot.send_message(user_id, t("main_menu", lang), reply_markup=main_menu_markup(lang))

# --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã ---
def update_referral_spending(purchaser_id, amount):
    for referrer, referred_set in referrals.items():
        if purchaser_id in referred_set:
            current_spent = user_spending.get(referrer, 0)
            user_spending[referrer] = current_spent + amount

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫
            if user_spending[referrer] >= 4100:
                lang = user_language.get(referrer, "ru")
                bot.send_message(referrer, t("referral_notify", lang).format(sum=user_spending[referrer]))

# –í—ã–∑—ã–≤–∞—Ç—å update_referral_spending –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º

# --- –ú–µ–Ω—é –ú–æ–∏ –∑–∞–∫–∞–∑—ã ---
def my_orders_menu_markup(user_id, lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    user_orders = [order for order in orders.values() if order["user_id"] == user_id]
    if not user_orders:
        markup.add(types.InlineKeyboardButton(t("back", lang), callback_data="back_main"))
        return markup

    for order in user_orders:
        status = order["status"]
        total = format_currency(order["total"])
        text = f"–ó–∞–∫–∞–∑ #{order['id']}: {total}\n–°—Ç–∞—Ç—É—Å: "
        if status == "paid":
            text += t("order_status_paid", lang)
        elif status == "completed":
            text += t("order_status_completed", lang)
        else:
            text += status

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ)
        buttons = []
        if status == "paid":
            buttons.append(types.InlineKeyboardButton(t("confirm_received", lang), callback_data=f"confirm_receive_{order['id']}"))
        buttons.append(types.InlineKeyboardButton(t("back", lang), callback_data="back_main"))

        for btn in buttons:
            markup.add(btn)
    return markup

@bot.message_handler(func=lambda message: message.text in ["üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"])
def my_orders_handler(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    user_orders = [order for order in orders.values() if order["user_id"] == user_id]
    if not user_orders:
        bot.send_message(user_id, t("orders_empty", lang), reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(t("back", lang)))
        return
    bot.send_message(user_id, "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:", reply_markup=my_orders_menu_markup(user_id, lang))

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_receive_"))
def confirm_receive_callback(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    order_id = int(call.data.split("_")[-1])

    order = orders.get(order_id)
    if order and order["user_id"] == user_id:
        if order["status"] == "paid":
            order["status"] = "completed"
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π!")
            bot.edit_message_text(f"–ó–∞–∫–∞–∑ #{order_id} {t('order_status_completed', lang)}", user_id, call.message.message_id)
        else:
            bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ.")
    else:
        bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data == "back_main")
def back_main_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    bot.edit_message_text(t("main_menu", lang), user_id, call.message.message_id, reply_markup=main_menu_markup(lang))
    bot.answer_callback_query(call.id)
    
    # --- –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ ---
user_review_state = {}  # user_id: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –æ—Ç–∑—ã–≤

# --- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ ---
def reviews_menu_markup(lang):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("‚úçÔ∏è " + ("–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" if lang == "ru" else "–ó–∞–ª–∏—à–∏—Ç–∏ –≤—ñ–¥–≥—É–∫"), callback_data="review_add"),
        types.InlineKeyboardButton("üìñ " + ("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã" if lang == "ru" else "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–≥—É–∫–∏"), callback_data="review_view"),
        types.InlineKeyboardButton(t("back", lang), callback_data="back_main")
    )
    return markup

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª –æ—Ç–∑—ã–≤–æ–≤ ---
@bot.message_handler(func=lambda message: message.text in ["‚≠ê –û—Ç–∑—ã–≤—ã", "–û—Ç–∑—ã–≤—ã", "‚≠ê –í—ñ–¥–≥—É–∫–∏", "–í—ñ–¥–≥—É–∫–∏"])
def reviews_menu_handler(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    bot.send_message(user_id, ("–û—Ç–∑—ã–≤—ã" if lang == "ru" else "–í—ñ–¥–≥—É–∫–∏"), reply_markup=reviews_menu_markup(lang))

# --- –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ ---
@bot.callback_query_handler(func=lambda call: call.data == "review_add")
def review_add_start(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    user_review_state[user_id] = True
    bot.send_message(user_id, t("review_prompt", lang))
    bot.answer_callback_query(call.id)

# --- –ü—Ä–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞ ---
@bot.message_handler(func=lambda message: user_review_state.get(message.from_user.id, False))
def review_receive(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")
    text = message.text.strip()
    if len(text) < 5:
        bot.send_message(user_id, ("–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." if lang == "ru" else "–í—ñ–¥–≥—É–∫ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."))
        return
    reviews.append({"user_id": user_id, "text": text, "approved": False})
    user_review_state[user_id] = False
    bot.send_message(user_id, t("review_added", lang))
    # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("‚úîÔ∏è –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"review_approve_{len(reviews)-1}"),
        types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"review_delete_{len(reviews)-1}")
    )
    admin_text = f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{text}"
    notify_admin(admin_text, reply_markup=markup)

# --- –ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ ---
@bot.callback_query_handler(func=lambda call: call.data.startswith("review_approve_") or call.data.startswith("review_delete_"))
def review_moderation_handler(call):
    data = call.data
    idx = int(data.split("_")[-1])
    if idx < 0 or idx >= len(reviews):
        bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if call.from_user.id != ADMIN_CHAT_ID:
        bot.answer_callback_query(call.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        return

    if data.startswith("review_approve_"):
        reviews[idx]["approved"] = True
        bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω.")
        bot.edit_message_reply_markup(ADMIN_CHAT_ID, call.message.message_id, reply_markup=None)
    elif data.startswith("review_delete_"):
        reviews.pop(idx)
        bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.")
        bot.edit_message_reply_markup(ADMIN_CHAT_ID, call.message.message_id, reply_markup=None)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ ---
def get_approved_reviews_text(lang):
    approved = [r for r in reviews if r["approved"]]
    if not approved:
        return ("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤." if lang == "ru" else "–ü–æ–∫–∏ –Ω–µ–º–∞—î –≤—ñ–¥–≥—É–∫—ñ–≤.")
    texts = []
    for r in approved:
        texts.append(f"‚≠ê {r['text']}")
    return "\n\n".join(texts)

@bot.callback_query_handler(func=lambda call: call.data == "review_view")
def review_view_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    text = get_approved_reviews_text(lang)
    bot.send_message(user_id, text)
    bot.answer_callback_query(call.id)
    
    # --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ---
def get_referral_link(user_id):
    return f"https://t.me/YourBotUsername?start=ref{user_id}"

def show_referral_menu(user_id, lang):
    referred = referrals.get(user_id, [])
    total_spent = user_spending.get(user_id, 0)
    text = (f"üë• –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {len(referred)} —á–µ–ª–æ–≤–µ–∫\n"
            f"üí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_spent} –≥—Ä–Ω\n\n"
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
            f"<a href='{get_referral_link(user_id)}'>–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ</a>")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(t("back", lang), callback_data="back_main"))
    bot.send_message(user_id, text, reply_markup=markup, parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---
def confirm_order_received(order_id, user_id, lang):
    order = orders.get(order_id)
    if not order or order["user_id"] != user_id:
        bot.send_message(user_id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    if order["status"] != "paid":
        bot.send_message(user_id, "–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
        return
    order["status"] = "completed"
    bot.send_message(user_id, t("order_status_completed", lang))
    
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±–µ–∫–æ–≤ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤ ---
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    lang = user_language.get(user_id, "ru")
    data = call.data

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_main":
        bot.send_message(user_id, t("main_menu", lang), reply_markup=main_menu_markup(lang))
        bot.answer_callback_query(call.id)
        return

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    if data == "referral_system":
        show_referral_menu(user_id, lang)
        bot.answer_callback_query(call.id)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if data.startswith("confirm_received_"):
        order_id = int(data.split("_")[-1])
        confirm_order_received(order_id, user_id, lang)
        bot.answer_callback_query(call.id)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º
    if data.startswith("admin_confirm_") and user_id == ADMIN_CHAT_ID:
        order_id = int(data.split("_")[-1])
        order = orders.get(order_id)
        if not order:
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if order["status"] != "waiting_admin_confirmation":
            bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω", show_alert=True)
            return
        order["status"] = "paid"
        bot.answer_callback_query(call.id, f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

        user_order_id = order["user_id"]
        bot.send_message(user_order_id, t("pay_confirmed", user_language.get(user_order_id, "ru")))

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª—É
        referrer = None
        for ref, referred_list in referrals.items():
            if user_order_id in referred_list:
                referrer = ref
                break
        if referrer:
            user_spending[referrer] = user_spending.get(referrer, 0) + order["total"]
            total_spent = user_spending[referrer]
            if total_spent >= 4100:
                bot.send_message(referrer, t("referral_notify", user_language.get(referrer, "ru")).format(sum=total_spent))
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–æ–ª–±–µ–∫–æ–≤...

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º ---
@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    lang = user_language.get(user_id, "ru")

    # –ü–∞—Ä—Å–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
    args = message.text.split()
    if len(args) > 1 and args[1].startswith("ref"):
        ref_id = int(args[1][3:])
        if ref_id != user_id:
            referrals.setdefault(ref_id, []).append(user_id)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(user_id, t("main_menu", lang), reply_markup=main_menu_markup(lang))

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling())


